============================
>>>> Versión 0.0.x.x

- Soportar identificadores con varios puntos para espacios de nombre y manejo de objetos anidados.

- Corregir bug, en la conversión de tipos del constructor de los objetos (float -> int)

- Implementar un Read genérico Read {stringLiteral:variable, stringLiteral:variable, .... };

- Volcar salida en un Html control.
- Mejorar la interfaz de usuario  (TinyIDE)
- Generalizar la definición del ensamblado que contiene la librería de funciones por defecto. Emplear inyección de código para definir esa librería. Por defecto puede existir una. 

- Depurar o limpiar ParserTree
- Limpiar los TODO's


============================
>>>> Versión 0.1.x.x
- Empotrar el código en ANotas
- Implementar librería de funciones de ANotas
- Mecanismo provisional para trabajar con colecciones de Notas y coleeciones de Carpetas 
- Las funciones CodeExecuteBinaryXXXXXX se deben simplificar usando generics.

============================
>>>> Versión 0.2.x.x
- Buscar solución al soporte de tipos int, decimal, double, byte, ...
- Implementar tipos arrays o tipos enumerables.
- Implementar foreach
- Implementar comprobación de tipos
- Emplear generics para resolver las operaciones en las expresiones binarias.
- Implementar definición de funciones.
- Implementar tipo locales
- Cambiar el tipo base interno de AntScript de las variables numéricas a "decimal" de .net ??? (en lugar de float)
- Refactorizar código empleando patrónes para la ampliación del lenguaje. Estudiar posibles patrones para ampliar facilmente el lenguaje


////////////////////////////
////////////////////////////
Resueltas
////////////////////////////
////////////////////////////

============================
>>>> Versión 0.0.0.1
X- Estudiar código de ejemplo
X- Sustituir el compilador por el intérprete
X- Implementar comentarios
X- Soportar números de punto flotante
X- Enriquecer Tokens

X- Que la entrada del Scanner acepte una cadena de texto.
X- En CodeRun implementar la resolución de las expresiones con factor
X- Implementar * / - en el evaluador de expresiones
X- Implementar anidamiento de paréntesis
X- Implementar operadores unarios

X- Crear repositorio
X- Aislar en un proyecto nuevo, poner un espacio de nombres.
X- Implementar precedencia de operadores

X- Organizar mejor la rutina principal del scanner (estructurar la secuencia principal)
X- Poner como tokens las palabras reservadas y los identificadores
X- Limpiar código
X- Implementar operadiores lógicos Or, And, Not

X- Implementar operadores relacionales >, >=, <, <=, !=
X- Implementar operadores entre expresiones de cadena
X- Implementar If

X- Implementar While
X- Quitar el do al bucle for
X- Poner cierres como end if, end for, end while

X- Implementar break dentro de los bucles

X- Implementar asignaciones objeto.propiedad = expresion
X- Definir clases de varios tipos (en función de una cadena en la definición).
X- Resolver problema de conversión de float a int/decimal
X- Implementar asignación de fechas, literal fecha.
X- Implementar distintos operadores con datos dipos fechas (>, >=, <, <=, !=, ==). 
X- Implementar llamadas a funciones (en sentencias y expresiones): scanner y parser.
X- Implementar llamadas a funciones (en sentencias y expresiones): CodeGen (maqueta)
X- Implementar llamadas a funciones (en sentencias y expresiones): CodeGen (código real)
X- Susituir el mecanismo de definición de variables tipo objeto ($xxx$ por "new Objeto(parámetros constructor))
X- Deputar tokens (quitar do, ... ) 
X- Estructurar código de CodeGen, sección de resolución de expresiones binarias y unarias. 
X- En Scanner, rectificar el análisis de los identificadores para que puedan contener dígitos en medio o al final.
