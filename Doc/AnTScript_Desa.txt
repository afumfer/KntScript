============================
>>>> Versión 0.0.1.x


- Que desde la aplicación Host se pueda inyectar objetos en la tabla de símbolos, y que el ésta tabla pueda ser leída por la aplicación host después de la finalización del script. Así podemos inyectar objetos que queramos manipular en el script y obtener al final su resultado. 

- Poner un parámetro donde los errores no se muestre con un MessageBox sino que se visualicen de otra forma de cara a no bloquear la ejecución debido a un diálogo modal.

- Implementar operador xor.

- Implementar CloseOutWindow()

- Preparar scripts ejemplo y test.


============================
>>>> Versión 0.0.2.x
- Implementar tipos arrays e indizadores de colecciones .
- Implementar comprobación de tipos
- Implementar declaración automática de variables. Eliminar / Corregir implementación de CodeSpecialStoreObject()
- Mejorar el tratamiento de errores
- Informar de la línea / columna del error
- Implementar definición de funciones
- Implementar ámbito de variables locales
- Implementar referencia de librerias de funciones AntTScript
- Pasar IdentObject de CodeRun al Parser o al Scanner
- Estudiar el tema de la librería de funciones por defecto. Ver si se puede omitir librería por defecto y bucar función en todos los ensamblados. 
- Refactorizar código empleando patrónes para la ampliación del lenguaje. Estudiar posibles patrones para ampliar facilmente el lenguaje

- Se podría añadir un punto de menú que ejecute un script por cada punto de menú. Los script's podría estar en un directorio y el nombre del menú podría ser el nombre del fichero.

- Que cada script se ejecute en un thread diferente


////////////////////////////
////////////////////////////
Resueltas
////////////////////////////
////////////////////////////

============================
>>>> Versión 0.0.0.1
X- Estudiar código de ejemplo
X- Sustituir el compilador por el intérprete
X- Implementar comentarios
X- Soportar números de punto flotante
X- Enriquecer Tokens
X- Que la entrada del Scanner acepte una cadena de texto.
X- En CodeRun implementar la resolución de las expresiones con factor
X- Implementar * / - en el evaluador de expresiones
X- Implementar anidamiento de paréntesis
X- Implementar operadores unarios
X- Crear repositorio
X- Aislar en un proyecto nuevo, poner un espacio de nombres.
X- Implementar precedencia de operadores
X- Organizar mejor la rutina principal del scanner (estructurar la secuencia principal)
X- Poner como tokens las palabras reservadas y los identificadores
X- Limpiar código
X- Implementar operadiores lógicos Or, And, Not
X- Implementar operadores relacionales >, >=, <, <=, !=
X- Implementar operadores entre expresiones de cadena
X- Implementar If
X- Implementar While
X- Quitar el do al bucle for
X- Poner cierres como end if, end for, end while
X- Implementar break dentro de los bucles
X- Implementar asignaciones objeto.propiedad = expresion
X- Definir clases de varios tipos (en función de una cadena en la definición).
X- Resolver problema de conversión de float a int/decimal
X- Implementar asignación de fechas, literal fecha.
X- Implementar distintos operadores con datos dipos fechas (>, >=, <, <=, !=, ==). 
X- Implementar llamadas a funciones (en sentencias y expresiones): scanner y parser.
X- Implementar llamadas a funciones (en sentencias y expresiones): CodeGen
X- Susituir el mecanismo de definición de variables tipo objeto ($xxx$ por "new Objeto(parámetros constructor))
X- Deputar tokens (quitar do, ... ) 
X- Estructurar código de CodeGen, sección de resolución de expresiones binarias y unarias. 
X- En Scanner, rectificar el análisis de los identificadores para que puedan contener dígitos en medio o al final.


============================
>>>> Versión 0.0.0.2
X- Soportar identificadores con varios puntos para espacios de nombre y manejo de objetos anidados (declaración, lectura, escritura variables o miembros).
X- Soportar llamadas a funciones o métodos con varios puntos para espacios de nombre y manejo de objetos anidados (declaración, lectura, escritura variables o miembros).
X- Elimnar la clase IdentObject (obsoleta) -> pasará a ser IdentDelailed()...


============================
>>>> Versión 0.0.0.3
X- Emplear generics para resolver las operaciones en las expresiones binarias.
X- Implementar soporte de tipos int, single, float, decimal, 
X- Corregir CodeExecuteUnaryExpr 
X- Probar expresiones aritméticas, lógicas y relacionales. 
X- Probar conversión de tipos del constructor de los objetos (float -> int). 
X- Implementar soporte a tipos de datos booleanos
X- Implementar foreach (soporte básico para recorrer tipos enumerables)
X- Probar que se puedan leer variables tipo xxx.xxx.xxx. 
X- Implementar un Read genérico: ReadVar { stringLiteral : variable, stringLiteral : variable, .... }; 
X- Corregir problema de acentos y juegos de caracteres. Tratar código fuente como UTF-8.


============================
>>>> Versión 0.0.0.4
X- Abstraer entrada-salida de CodeRun.
X- Nueva clase engine para simplificar el uso externo.
X- Añadido proyecto AnTScriptAppHost
X- Reorganizar ensamblados y separar la capa de usuario del núcleo del intérprete (Primera fase - No estable)
X- Añadido proyecto AntTScriptAppLibrary
X- Reorganizar ensamblados y separar la capa de usuario del núcleo del intérprete (Segunda fase)
X- Resolver problema de la instanciación de objetos de un ensamblado disferente al actual. 

X- Limpiar ParserTree

X- Mejorar la interfaz de usuario  (AnTScript - Console)
X- Definir un directorio temporal para grabar los script's
X- Poner la extensión de los ficheros script a ants
X- Al grabar, preguntar al usuairo si quiere sobreescribir el fichero.

X- Implementar printline
X- Implementar clear
X- Hacer sencible a mayúsculas.

X- Validar que el fichero de script pasado por parámetro existas.
X- En el ejecutor directo implementar sobrecarga o método nuevo para ejecutar un código pasado por parámetro (y no sólo el nombre de fichero). Además debe haber un parámetro donde no se muestre la ventana de output.
X- Depurar la librería con funciones básicas, y que esta librería sea personalizable. La librería personalizable debe heredar de AnTScript.Library. 
X- Limpiar los TODO's

============================
>>>> Versión 0.0.0.5
(Versión estable)
X- Corregir error al grabar script en la consola AnTScript

============================
>>>> Versión 0.0.1.2
X- Corregir ambiguedad en la reflexión cuando entre varios métodos con el mismo nombre, uno de ellos no tiene parámetros. 
X- Implementar Función de librería que devuelve el contenido de la ventana de Output.
X- Funciones en la librería para mostrar o ocultar la ventana OutPut.
X- Verificar funcionaliad en ANotas
X- Crear un nuevo proyecto para la DLL y estudiar el tema de Any Plataform (*).


============================
>>>> Versión 0.0.1.3
X- Implementar tipo de datos null
X- Depuración en la evaluación de expresiones con datos bool

============================
>>>> Versión 0.0.1.4
X- Refactorizada la clase engine y el formulario consola AnTS
X- Buscar una estrategia para hacer uso de los enumerados  de .NET y propiedades de claes estáticas (por ejemplo System.Text.Encoding.UTF8) 
X- Poder asignar valores a propiedes estáticas